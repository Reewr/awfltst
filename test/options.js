'use strict';

const test = require('..');
const exec = require('./exec');


test('options.only', async function () {
  let result;

  result = await exec('test/spawn/only.js');
  this.eq(result.stdout, [
    '',
    '  1 test _ ms',
    '',
    '    ✔ pass',
    '',
    '      1.1 sub-test inherit _ ms',
    '',
    '        ✔ pass',
    '',
    '      1.2 sub-test override (skipped)',
    '',
    '  2 should be skipped (skipped)',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      4 tests   2 assertions',
    '  Passing:    2 tests   2 assertions',
    '  Skipped:    2 tests',
    '  Duration:   _ ms',
    ''], 'all');

  result = await exec('-ttest', 'test/spawn/only.js');
  this.eq(result.stdout, [
    '',
    '  1 test _ ms',
    '',
    '    ✔ pass',
    '',
    '      1.1 sub-test inherit _ ms',
    '',
    '        ✔ pass',
    '',
    '      1.2 sub-test override (skipped)',
    '',
    '  2 should be skipped (skipped)',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      4 tests   2 assertions',
    '  Passing:    2 tests   2 assertions',
    '  Skipped:    2 tests',
    '  Duration:   _ ms',
    ''], 'only test, should be identical to running all');

  result = await exec('-t', 'should be skipped', 'test/spawn/only.js');
  this.eq(result.stdout, [
    '',
    '  1 test _ ms',
    '',
    '    ✔ pass',
    '',
    '      1.1 sub-test inherit _ ms',
    '',
    '        ✔ pass',
    '',
    '      1.2 sub-test override (skipped)',
    '',
    '  2 should be skipped _ ms',
    '',
    '    ✘ fail',
    '',
    '      At:       ./test/spawn/only.js (16:8)',
    '      Operator: fail',
    '',
    '',
    '  Failed Tests: There was 1 failed test with 1 failed assertion!',
    '',
    '',
    '  Total:      4 tests   3 assertions',
    '  Passing:    2 tests   2 assertions',
    '  Failing:    1 test    1 assertion',
    '  Skipped:    1 test',
    '  Duration:   _ ms',
    ''], 'only skipped, should be run when specified on command line');

  result = await exec('--only', 'sub-test override', 'test/spawn/only.js');
  this.eq(result.stdout, [
    '',
    '  1 test _ ms',
    '',
    '    ✔ pass',
    '',
    '      1.1 sub-test inherit _ ms',
    '',
    '        ✔ pass',
    '',
    '      1.2 sub-test override _ ms',
    '',
    '        ✔ pass',
    '',
    '  2 should be skipped (skipped)',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      4 tests   3 assertions',
    '  Passing:    3 tests   3 assertions',
    '  Skipped:    1 test',
    '  Duration:   _ ms',
    ''], 'only skipped sub-test, should also be run when parent is run');
});

test('options.skip', async function () {
  let result;

  result = await exec('test/spawn/skip.js');
  this.eq(result.stdout, [
    '',
    '  1 test _ ms',
    '',
    '    ✔ pass',
    '',
    '      1.1 sub-test inherit _ ms',
    '',
    '        ✔ pass',
    '',
    '      1.2 sub-test override (skipped)',
    '',
    '  2 should be skipped (skipped)',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      4 tests   2 assertions',
    '  Passing:    2 tests   2 assertions',
    '  Skipped:    2 tests',
    '  Duration:   _ ms',
    ''], 'all');

  result = await exec('-Ttest', 'test/spawn/skip.js');
  this.eq(result.stdout, [
    '',
    '  1 test (skipped)',
    '  2 should be skipped (skipped)',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      2 tests   0 assertions',
    '  Passing:    0 tests   0 assertions',
    '  Skipped:    2 tests',
    '  Duration:   _ ms',
    ''], 'skip test');

  result = await exec('-T', 'sub-test inherit', 'test/spawn/skip.js');
  this.eq(result.stdout, [
    '',
    '  1 test _ ms',
    '',
    '    ✔ pass',
    '',
    '      1.1 sub-test inherit (skipped)',
    '      1.2 sub-test override (skipped)',
    '',
    '  2 should be skipped (skipped)',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      4 tests   1 assertion',
    '  Passing:    1 test    1 assertion',
    '  Skipped:    3 tests',
    '  Duration:   _ ms',
    ''], 'skip sub-test');
});

test('options.group', async function () {
  let result;

  result = await exec('test/spawn/group.js');
  this.eq(result.stdout, [
    '',
    '  1 test with no group _ ms',
    '',
    '    ✔ pass',
    '',
    '  2 test in g1 _ ms',
    '',
    '    ✔ pass',
    '',
    '  3 test in both g1 and g2 _ ms',
    '',
    '    ✔ pass',
    '',
    '  4 test in g2 _ ms',
    '',
    '    ✔ pass',
    '',
    '  5 test in g3 _ ms',
    '',
    '    ✔ pass',
    '',
    '      5.1 sub-test in g3 inherit _ ms',
    '',
    '        ✔ pass',
    '',
    '      5.2 sub-test in g3 override _ ms',
    '',
    '        ✔ pass',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      7 tests   7 assertions',
    '  Passing:    7 tests   7 assertions',
    '  Duration:   _ ms',
    ''], 'all');


  result = await exec('-gg1', 'test/spawn/group.js');
  this.eq(result.stdout, [
    '',
    '  1 test with no group (skipped)',
    '',
    '  2 test in g1 _ ms',
    '',
    '    ✔ pass',
    '',
    '  3 test in both g1 and g2 _ ms',
    '',
    '    ✔ pass',
    '',
    '  4 test in g2 (skipped)',
    '  5 test in g3 (skipped)',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      5 tests   2 assertions',
    '  Passing:    2 tests   2 assertions',
    '  Skipped:    3 tests',
    '  Duration:   _ ms',
    ''], 'only group 1');

  result = await exec('-g', 'g2', 'test/spawn/group.js');
  this.eq(result.stdout, [
    '',
    '  1 test with no group (skipped)',
    '  2 test in g1 (skipped)',
    '',
    '  3 test in both g1 and g2 _ ms',
    '',
    '    ✔ pass',
    '',
    '  4 test in g2 _ ms',
    '',
    '    ✔ pass',
    '',
    '  5 test in g3 (skipped)',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      5 tests   2 assertions',
    '  Passing:    2 tests   2 assertions',
    '  Skipped:    3 tests',
    '  Duration:   _ ms',
    ''], 'only group 2');

  result = await exec('--group', 'g2', '--group=g3', 'test/spawn/group.js');
  this.eq(result.stdout, [
    '',
    '  1 test with no group (skipped)',
    '  2 test in g1 (skipped)',
    '',
    '  3 test in both g1 and g2 _ ms',
    '',
    '    ✔ pass',
    '',
    '  4 test in g2 _ ms',
    '',
    '    ✔ pass',
    '',
    '  5 test in g3 _ ms',
    '',
    '    ✔ pass',
    '',
    '      5.1 sub-test in g3 inherit _ ms',
    '',
    '        ✔ pass',
    '',
    '      5.2 sub-test in g3 override (skipped)',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      7 tests   4 assertions',
    '  Passing:    4 tests   4 assertions',
    '  Skipped:    3 tests',
    '  Duration:   _ ms',
    ''], 'only group 2 and group 3');


  result = await exec('-Gg1', 'test/spawn/group.js');
  this.eq(result.stdout, [
    '',
    '  1 test with no group _ ms',
    '',
    '    ✔ pass',
    '',
    '  2 test in g1 (skipped)',
    '  3 test in both g1 and g2 (skipped)',
    '',
    '  4 test in g2 _ ms',
    '',
    '    ✔ pass',
    '',
    '  5 test in g3 _ ms',
    '',
    '    ✔ pass',
    '',
    '      5.1 sub-test in g3 inherit _ ms',
    '',
    '        ✔ pass',
    '',
    '      5.2 sub-test in g3 override _ ms',
    '',
    '        ✔ pass',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      7 tests   5 assertions',
    '  Passing:    5 tests   5 assertions',
    '  Skipped:    2 tests',
    '  Duration:   _ ms',
    ''], 'not group 1');

  result = await exec('-G', 'g2', 'test/spawn/group.js');
  this.eq(result.stdout, [
    '',
    '  1 test with no group _ ms',
    '',
    '    ✔ pass',
    '',
    '  2 test in g1 _ ms',
    '',
    '    ✔ pass',
    '',
    '  3 test in both g1 and g2 (skipped)',
    '  4 test in g2 (skipped)',
    '',
    '  5 test in g3 _ ms',
    '',
    '    ✔ pass',
    '',
    '      5.1 sub-test in g3 inherit _ ms',
    '',
    '        ✔ pass',
    '',
    '      5.2 sub-test in g3 override _ ms',
    '',
    '        ✔ pass',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      7 tests   5 assertions',
    '  Passing:    5 tests   5 assertions',
    '  Skipped:    2 tests',
    '  Duration:   _ ms',
    ''], 'not group 2');

  result = await exec('--skip-group', 'g2', '--skip-group=g4',
                      'test/spawn/group.js');
  this.eq(result.stdout, [
    '',
    '  1 test with no group _ ms',
    '',
    '    ✔ pass',
    '',
    '  2 test in g1 _ ms',
    '',
    '    ✔ pass',
    '',
    '  3 test in both g1 and g2 (skipped)',
    '  4 test in g2 (skipped)',
    '',
    '  5 test in g3 _ ms',
    '',
    '    ✔ pass',
    '',
    '      5.1 sub-test in g3 inherit _ ms',
    '',
    '        ✔ pass',
    '',
    '      5.2 sub-test in g3 override (skipped)',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      7 tests   4 assertions',
    '  Passing:    4 tests   4 assertions',
    '  Skipped:    3 tests',
    '  Duration:   _ ms',
    ''], 'not group 2 or group 4');
});

test('options.console', async function () {
  let result;

  result = await exec('test/spawn/console.js');
  this.eq(result.stdout, [
    '',
    '  1 default _ ms',
    '',
    '    line 1',
    '',
    '    ✘ unexpected output to stderr',
    '',
    '      At:       ./test/spawn/console.js (6:1)',
    '      Operator: stderr',
    '      Expected: \'\'',
    '      Actual:   \'line 2\\n\'',
    '',
    '  2 captured _ ms',
    '',
    '    line 3',
    '',
    '    ✘ unexpected output to stderr',
    '',
    '      At:       ./test/spawn/console.js (11:1)',
    '      Operator: stderr',
    '      Expected: \'\'',
    '      Actual:   \'line 4\\n\'',
    'line 5',
    '',
    '  3 not captured _ ms',
    '',
    '',
    '  Failed Tests: There was 2 failed tests with 2 failed assertions!',
    '',
    '',
    '  Total:      3 tests   2 assertions',
    '  Passing:    1 test    0 assertions',
    '  Failing:    2 tests   2 assertions',
    '  Duration:   _ ms',
    ''], 'default');

  result = await exec('--capture-console', 'test/spawn/console.js');
  this.eq(result.stdout, [
    '',
    '  1 default _ ms',
    '',
    '    line 1',
    '',
    '    ✘ unexpected output to stderr',
    '',
    '      At:       ./test/spawn/console.js (6:1)',
    '      Operator: stderr',
    '      Expected: \'\'',
    '      Actual:   \'line 2\\n\'',
    '',
    '  2 captured _ ms',
    '',
    '    line 3',
    '',
    '    ✘ unexpected output to stderr',
    '',
    '      At:       ./test/spawn/console.js (11:1)',
    '      Operator: stderr',
    '      Expected: \'\'',
    '      Actual:   \'line 4\\n\'',
    'line 5',
    '',
    '  3 not captured _ ms',
    '',
    '',
    '  Failed Tests: There was 2 failed tests with 2 failed assertions!',
    '',
    '',
    '  Total:      3 tests   2 assertions',
    '  Passing:    1 test    0 assertions',
    '  Failing:    2 tests   2 assertions',
    '  Duration:   _ ms',
    ''], 'capture on');

  result = await exec('--no-capture-console', 'test/spawn/console.js');
  this.eq(result.stdout, [
    'line 1',
    '',
    '  1 default _ ms',
    '',
    '  2 captured _ ms',
    '',
    '    line 3',
    '',
    '    ✘ unexpected output to stderr',
    '',
    '      At:       ./test/spawn/console.js (11:1)',
    '      Operator: stderr',
    '      Expected: \'\'',
    '      Actual:   \'line 4\\n\'',
    'line 5',
    '',
    '  3 not captured _ ms',
    '',
    '',
    '  Failed Tests: There was 1 failed test with 1 failed assertion!',
    '',
    '',
    '  Total:      3 tests   1 assertion',
    '  Passing:    2 tests   0 assertions',
    '  Failing:    1 test    1 assertion',
    '  Duration:   _ ms',
    ''], 'capture off');
});
